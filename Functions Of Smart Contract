// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleWallet {
    address public walletOwner;
    uint256 public walletBalance;

    // Event to log deposits
    event Deposit(address indexed depositor, uint256 depositAmount);
    
    // Event to log withdrawals
    event Withdraw(address indexed withdrawer, uint256 withdrawAmount);
    
    constructor() {
        walletOwner = msg.sender; // Set the contract deployer as the owner
        walletBalance = 0;
    }
    
    // Modifier to check if the caller is the owner
    modifier onlyOwner() {
        require(msg.sender == walletOwner, "Caller is not the owner");
        _;
    }

    // Function to deposit Ether into the contract
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        
        walletBalance += msg.value;
        emit Deposit(msg.sender, msg.value);
    }
    
    // Function to withdraw Ether from the contract
    function withdraw(uint256 withdrawAmount) public onlyOwner {
        require(withdrawAmount <= walletBalance, "Insufficient balance in the contract");

        walletBalance -= withdrawAmount;
        payable(msg.sender).transfer(withdrawAmount);
        emit Withdraw(msg.sender, withdrawAmount);
    }

    // Function to demonstrate assert() usage
    function checkWalletBalance() public view returns (uint256) {
        assert(walletBalance >= 0); // Ensure the balance is never negative
        return walletBalance;
    }

    // Function to demonstrate revert() usage
    function forceRevert() public pure {
        revert("This function always reverts");
    }

    // Function to withdraw all Ether from the contract
    function withdrawAll() public onlyOwner {
        uint256 amount = walletBalance;
        walletBalance = 0;
        payable(walletOwner).transfer(amount);
        emit Withdraw(walletOwner, amount);
    }
}
